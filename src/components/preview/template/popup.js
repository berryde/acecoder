export default "<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n\t\t<link href=\"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css\" rel=\"stylesheet\" />\r\n\t\t<style>\r\n\t\t\t.loader {\r\n\t\t\t\tborder: 10px solid #f3f3f3;\r\n\t\t\t\tborder-top: 10px solid #282c34;\r\n\t\t\t\tborder-radius: 50%;\r\n\t\t\t\twidth: 60px;\r\n\t\t\t\theight: 60px;\r\n\t\t\t\tanimation: spin 2s linear infinite;\r\n\t\t\t}\r\n\r\n\t\t\t.loader-wrapper {\r\n\t\t\t\theight: 100vh;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t}\r\n\r\n\t\t\t@keyframes spin {\r\n\t\t\t\t0% {\r\n\t\t\t\t\ttransform: rotate(0deg);\r\n\t\t\t\t}\r\n\t\t\t\t100% {\r\n\t\t\t\t\ttransform: rotate(360deg);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t</style>\r\n\t\t<script>\r\n\t\t\t// Create a public directory\r\n\t\t\tlet static = {};\r\n\r\n\t\t\t// Create the script tag\r\n\t\t\tlet script = createScript('');\r\n\t\t\tdocument.head.appendChild(script);\r\n\r\n\t\t\t// Create the style tag\r\n\t\t\tconst style = document.createElement('style');\r\n\t\t\tdocument.head.appendChild(style);\r\n\r\n\t\t\t// Intercept console messages\r\n\t\t\tconst levels = ['log', 'warn', 'error'];\r\n\t\t\tlevels.forEach((level) => {\r\n\t\t\t\tconsole[level] = (text) => reply(level, text);\r\n\t\t\t});\r\n\r\n\t\t\tfunction reply(type = 'log', data) {\r\n\t\t\t\twindow.opener.postMessage({\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tdata: data\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Generate a new script tag to re-run the script\r\n\t\t\tfunction createScript(src) {\r\n\t\t\t\tconst script = document.createElement('script');\r\n\t\t\t\tscript.setAttribute('type', 'module');\r\n\t\t\t\tscript.innerHTML = src;\r\n\t\t\t\treturn script;\r\n\t\t\t}\r\n\r\n\t\t\tfunction update(e) {\r\n\t\t\t\tswitch (e.data.type) {\r\n\t\t\t\t\tcase 'url':\r\n\t\t\t\t\t\tdocument.body.addEventListener('click', (clickEvent) => {\r\n\t\t\t\t\t\t\t// If it's not a left click, ignore it\r\n\t\t\t\t\t\t\tif (event.which !== 1) return;\r\n\t\t\t\t\t\t\t// If it's a click combined with some key combination, ignore it.\r\n\t\t\t\t\t\t\tif (event.metaKey || event.ctrlKey || event.shiftKey) return;\r\n\t\t\t\t\t\t\t// If the event default has already been prevented, ignore it.\r\n\t\t\t\t\t\t\tif (event.defaultPrevented) return;\r\n\r\n\t\t\t\t\t\t\t// Traverse the event target to find the link node if present, else return.\r\n\t\t\t\t\t\t\t// Inspired by https://github.com/sveltejs/svelte-repl\r\n\t\t\t\t\t\t\tlet link = event.target;\r\n\t\t\t\t\t\t\twhile (link && link.nodeName !== 'A') link = link.parentNode;\r\n\t\t\t\t\t\t\tif (!link || link.nodeName !== 'A') return;\r\n\r\n\t\t\t\t\t\t\t// If it's not an application link, ignore it.\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tlink.hasAttribute('download') ||\r\n\t\t\t\t\t\t\t\tlink.getAttribute('rel') === 'external' ||\r\n\t\t\t\t\t\t\t\tlink.target\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t\t// All base cases are now handled, so consume this event and prevent the default behavior.\r\n\t\t\t\t\t\t\tevent.preventDefault();\r\n\r\n\t\t\t\t\t\t\t// Handle relative and hash URLs as these should redirect to within the application.\r\n\t\t\t\t\t\t\t// Hash URLs are used by libraries like react-router.\r\n\t\t\t\t\t\t\tif (link.href.startsWith(e.origin)) {\r\n\t\t\t\t\t\t\t\tconst url = new URL(link.href);\r\n\t\t\t\t\t\t\t\tif (url.hash[0] === '#') {\r\n\t\t\t\t\t\t\t\t\t// Load the hash url\r\n\t\t\t\t\t\t\t\t\twindow.location.hash = url.hash;\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t} else if (url.pathname.endsWith('.html')) {\r\n\t\t\t\t\t\t\t\t\t// Load the static file\r\n\t\t\t\t\t\t\t\t\tdocument.body.innerHTML = static['public' + url.pathname];\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Open the link in a new window as this is the expected behavior.\r\n\t\t\t\t\t\t\twindow.open(link.href, '_blank');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// Update the filesystem for public files\r\n\t\t\t\t\t\tstatic = e.data.compiled.public;\r\n\r\n\t\t\t\t\t\t// Load the index.html file\r\n\t\t\t\t\t\tif ('public/index.html' in static) {\r\n\t\t\t\t\t\t\tdocument.body.innerHTML = static['public/index.html'];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Load the script bundle\r\n\t\t\t\t\t\tdocument.head.removeChild(script);\r\n\t\t\t\t\t\tscript = createScript(e.data.compiled.js);\r\n\t\t\t\t\t\tdocument.head.appendChild(script);\r\n\r\n\t\t\t\t\t\t// Load the styles\r\n\t\t\t\t\t\tstyle.innerHTML = e.data.compiled.css;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Let the application know that the popup has loaded successfully\r\n\t\t\treply('system', 'loaded');\r\n\t\t\t// Listen for new commands\r\n\t\t\twindow.addEventListener('message', update);\r\n\t\t\twindow.addEventListener('beforeunload', () => {\r\n\t\t\t\treply('system', 'quit');\r\n\t\t\t});\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\t\t<div class=\"loader-wrapper\">\r\n\t\t\t<div class=\"loader\"></div>\r\n\t\t</div>\r\n\t</body>\r\n</html>\r\n";